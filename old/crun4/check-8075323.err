/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/numpy/core/fromnumeric.py:86: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/numpy/core/fromnumeric.py:86: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
Traceback (most recent call last):
  File "/scratch/rohit/Projects/MLgSA_GCNN/crun4/run.py", line 128, in <module>
    main()
  File "/scratch/rohit/Projects/MLgSA_GCNN/crun4/run.py", line 106, in main
    out = model(graph)
  File "/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/scratch/rohit/Projects/MLgSA_GCNN/crun4/run.py", line 57, in forward
    x = self.mp(x, edge_index, edge_weight)
  File "/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/tmp/8075323.tmpdir/rohit_pyg/tmpju3lhdve.py", line 20, in forward
    x = self.module_2(x, edge_index, edge_weight)
  File "/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/torch_geometric/nn/conv/ssg_conv.py", line 105, in forward
    x = self.propagate(edge_index, x=x, edge_weight=edge_weight,
  File "/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py", line 467, in propagate
    out = self.message(**msg_kwargs)
  File "/home/rohit/.conda/envs/pyg/lib/python3.10/site-packages/torch_geometric/nn/conv/ssg_conv.py", line 116, in message
    return edge_weight.view(-1, 1) * x_j
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 4.29 GiB (GPU 0; 15.77 GiB total capacity; 6.47 GiB already allocated; 199.12 MiB free; 15.14 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
